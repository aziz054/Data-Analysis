# LAB Number 2
# Data Wrangling
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
df = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/auto.csv', names = headers)
headers = ["symboling","normalized-losses","make","fuel-type","aspiration", "num-of-doors","body-style",
         "drive-wheels","engine-location","wheel-base", "length","width","height","curb-weight","engine-type",
         "num-of-cylinders", "engine-size","fuel-system","bore","stroke","compression-ratio","horsepower",
         "peak-rpm","city-mpg","highway-mpg","price"]
## Step 1 is Handling Missing Data
df.replace('?',np.NaN, inplace=True)
df.head()
## Identifying Missing Data
### 1) .isnull() Method
### 2) .notnull() Method
missing_data=df.isnull()
missing_data.head()
## Count Missing Data
for column in missing_data.columns.values.tolist(): #The tolist() function is used to convert a given array to an ordinary list with the same items, elements, or values. Syntax.
    print(column)  # Print column heading
    print(missing_data[column].value_counts())
    print("")
## Step 2 Dealing with missing data
Replace by mean:

"normalized-losses": 41 missing data, replace them with mean
"stroke": 4 missing data, replace them with mean
"bore": 4 missing data, replace them with mean
"horsepower": 2 missing data, replace them with mean
"peak-rpm": 2 missing data, replace them with mean
Replace by frequency:

"num-of-doors": 2 missing data, replace them with "four".
Reason: 84% sedans are four doors. Since four doors is most frequent, it is most likely to occur
Drop the whole row:

"price": 4 missing data, simply delete the whole row
Reason: You want to predict price. You cannot use any data entry without price data for prediction; therefore any row now without price data is not useful to you.

### Calculate the mean value for the "normalized-losses" column
### Then Replace with mean value
avg_norm_loss = df["normalized-losses"].astype("float").mean(axis=0) # Calculate the mean value for the "normalized-losses" column
print("Average of normalized-losses:", avg_norm_loss) 
df["normalized-losses"].replace(np.NaN, avg_norm_loss, inplace = True)  # Replace with mean value
### For "bore" Column
avg_bore = df["bore"].astype("float").mean(axis=0)
print(avg_bore)
df["bore"].replace(np.NaN,avg_bore,inplace = True)
df.head()
df['num-of-doors'].value_counts() # Counting
df['num-of-doors'].value_counts().idxmax() # maxium number of doors are 4 or 2 ?
### Replacing missing num of doors data with four beacuse it is the maximum value
df['num-of-doors'].replace(np.NaN,'four', inplace = True)
df.head()
### Dropping
df.dropna(subset=['price'],axis = 0, inplace = True)
df.reset_index(drop = True, inplace = True)
df
We are almost there!

### Last Step is correcting DataType
df.dtypes #the numerical values 'bore' and 'stroke' describe the engines, 
#so you should expect them to be of the type 'float' or 'int'; however, they are shown as type 'object'.
df[["bore","stroke"]] = df[["bore","stroke"]].astype('float')
df[["normalized-losses"]] = df[["normalized-losses"]].astype("int")
df[["price"]] = df[["price"]].astype("float")
df[["peak-rpm"]] = df[["peak-rpm"]].astype("float")
df.dtypes
df.head()
### Data Standardization
You usually collect data from different agencies in different formats. (Data standardization is also a term for a particular type of data normalization where you subtract the mean and divide by the standard deviation.)

#### What is standardization?

Standardization is the process of transforming data into a common format, allowing the researcher to make the meaningful comparison.
You will need to apply data transformation to transform mpg into L/100km.
Use this formula for unit conversion:

L/100km = 235 / mpg
df['city-L/100km'] = 235/df['city-mpg'] 
df['highway-L/100km'] = 235/df['highway-mpg']
df.head()
## Normalization
To demonstrate normalization, say you want to scale the columns "length", "width" and "height".

Target: normalize those variables so their value ranges from 0 to 1

Approach: replace the original value by (original value)/(maximum value)
pd.set_option('display.max_columns', None) # Using Pandas
df['length'] = df['length']/df['length'].max()  # replace (original value) by (original value)/(maximum value)
df['width'] = df['width']/df['width'].max()
df .head()
## To Show all columns without skipping any
pd.set_option('display.max_columns', None) # Using Pandas
df.head()
# Binning
#### In your data set, "horsepower" is a real valued variable ranging from 48 to 288 and it has 59 unique values. What if you only care about the price difference between cars with high horsepower, medium horsepower, and little horsepower (3 types)? You can rearrange them into three â€˜bins' to simplify analysis.

Use the Pandas method 'cut' to segment the 'horsepower' column into 3 bins.
import numpy as np

# Calculate the average of horse power
avg_HP = df["horsepower"].astype(float).mean(axis=0)

# Replace NaN values with the average
df["horsepower"].fillna(avg_HP, inplace=True)

print("Average of horse power:", avg_HP)

df["horsepower"]=df["horsepower"].astype( int, copy=True)
Plot the histogram of horsepower to see the distribution of horsepower.
%matplotlib inline
import matplotlib as plt
from matplotlib import pyplot
plt.pyplot.hist(df["horsepower"])

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")
bins = np.linspace(min(df["horsepower"]), max(df["horsepower"]), 4)
bins
group_values=("Low","Medium","High")
df["horsepower-binned"] = pd.cut(df["horsepower"],bins, labels = group_values, include_lowest = True)
df[["horsepower-binned","horsepower"]].head()
df["horsepower-binned"].value_counts()
%matplotlib inline
import matplotlib as plt
from matplotlib import pyplot
plt.pyplot.bar(group_values, df["horsepower-binned"].value_counts())

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")
%matplotlib inline
import matplotlib as plt
from matplotlib import pyplot
plt.pyplot.hist(df["horsepower-binned"],bins = 3)

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")
Indicator Variable
What is an indicator variable?

An indicator variable (or dummy variable) is a numerical variable used to label categories. They are called 'dummies' because the numbers themselves don't have inherent meaning.

Why use indicator variables?

You use indicator variables so you can use categorical variables for regression analysis in the later modules.

Example
The column "fuel-type" has two unique values: "gas" or "diesel". Regression doesn't understand words, only numbers. To use this attribute in regression analysis, you can convert "fuel-type" to indicator variables.

Use the Panda method 'get_dummies' to assign numerical values to different categories of fuel type.
df.columns
dummy_variable_1 = pd.get_dummies(df["fuel-type"])
dummy_variable_1.head()
dummy_variable_1.rename(columns={'gas':'fuel-type-gas', 'diesel':'fuel-type-diesel'}, inplace=True)
dummy_variable_1.head()
df.to_csv("C:\\Users\\Abdul Aziz\\lab2.csv", index = False)
